import 'package:flutter/material.dart';
import 'package:flutter_localizations/flutter_localizations.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:minq/data/providers.dart';
import 'package:minq/presentation/routing/app_router.dart';
import 'package:minq/presentation/theme/minq_theme.dart';
// This file is generated by the FlutterFire CLI.
// You will need to generate it after setting up your Firebase project.
import 'firebase_options.dart';

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();

  final firebaseInitialized = await _initializeFirebaseIfAvailable();

  runApp(
    ProviderScope(
      overrides: [
        firebaseAvailabilityProvider.overrideWithValue(firebaseInitialized),
      ],
      child: const MinQApp(),
    ),
  );
}

Future<bool> _initializeFirebaseIfAvailable() async {
  try {
    final options = DefaultFirebaseOptions.currentPlatform;
    await Firebase.initializeApp(options: options);
    return true;
  } on UnsupportedError catch (error) {
    debugPrint('Skipping Firebase initialization: $error');
  } catch (error) {
    debugPrint('Failed to initialize Firebase: $error');
  }
  return false;
}

class MinQApp extends ConsumerWidget {
  const MinQApp({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final appStartupAsyncValue = ref.watch(appStartupProvider);
    final router = ref.watch(routerProvider);

    ref.listen(notificationTapStreamProvider, (previous, next) {
      next.whenData((route) {
        if (route.isNotEmpty) {
          router.go(route);
        }
      });
    });
    const seedColor = Color(0xFF3A7DFF);

    final minqLight = MinqTheme.light();
    final minqDark = MinqTheme.dark();

    final lightTheme = ThemeData(
      colorScheme: ColorScheme.fromSeed(
        seedColor: seedColor,
        brightness: Brightness.light,
      ),
      useMaterial3: true,
      textTheme: GoogleFonts.plusJakartaSansTextTheme(),
    ).copyWith(
      scaffoldBackgroundColor: minqLight.background,
      snackBarTheme: const SnackBarThemeData(
        behavior: SnackBarBehavior.floating,
      ),
      appBarTheme: const AppBarTheme(
        surfaceTintColor: Colors.transparent,
        elevation: 0,
      ),
      cardTheme: const CardTheme(surfaceTintColor: Colors.transparent),
      iconButtonTheme: IconButtonThemeData(
        style: ButtonStyle(
          tapTargetSize: MaterialTapTargetSize.padded,
          minimumSize: MaterialStatePropertyAll<Size>(Size.square(48)),
        ),
      ),
      extensions: <ThemeExtension<dynamic>>[minqLight],
    );

    final darkTheme = ThemeData(
      colorScheme: ColorScheme.fromSeed(
        seedColor: seedColor,
        brightness: Brightness.dark,
      ),
      useMaterial3: true,
      textTheme: GoogleFonts.plusJakartaSansTextTheme(
        ThemeData(brightness: Brightness.dark).textTheme,
      ),
    ).copyWith(
      scaffoldBackgroundColor: minqDark.background,
      snackBarTheme: const SnackBarThemeData(
        behavior: SnackBarBehavior.floating,
      ),
      appBarTheme: const AppBarTheme(
        surfaceTintColor: Colors.transparent,
        elevation: 0,
      ),
      cardTheme: const CardTheme(surfaceTintColor: Colors.transparent),
      iconButtonTheme: IconButtonThemeData(
        style: ButtonStyle(
          tapTargetSize: MaterialTapTargetSize.padded,
          minimumSize: MaterialStatePropertyAll<Size>(Size.square(48)),
        ),
      ),
      extensions: <ThemeExtension<dynamic>>[minqDark],
    );

    return switch (appStartupAsyncValue) {
      AsyncLoading() => const MaterialApp(
        debugShowCheckedModeBanner: false,
        home: Scaffold(body: Center(child: CircularProgressIndicator())),
      ),
      AsyncError(:final error) => MaterialApp(
        debugShowCheckedModeBanner: false,
        home: Scaffold(body: Center(child: Text('Startup Error: $error'))),
      ),
      AsyncData() => MaterialApp.router(
        debugShowCheckedModeBanner: false,
        routerConfig: router,
        title: 'MinQ',
        theme: lightTheme,
        darkTheme: darkTheme,
        themeMode: ThemeMode.system,
        localizationsDelegates: const [
          GlobalMaterialLocalizations.delegate,
          GlobalWidgetsLocalizations.delegate,
          GlobalCupertinoLocalizations.delegate,
        ],
        supportedLocales: const [
          Locale('en', ''), // English, no country code
          Locale('ja', ''), // Japanese, no country code
        ],
        builder: (BuildContext context, Widget? child) {
          final mediaQuery = MediaQuery.of(context);
          final clampedScaler = mediaQuery.textScaler.clamp(
            minScaleFactor: 1.0,
            maxScaleFactor: 1.3,
          );
          return MediaQuery(
            data: mediaQuery.copyWith(textScaler: clampedScaler),
            child: child ?? const SizedBox.shrink(),
          );
        },
      ),
      _ => const MaterialApp(
        debugShowCheckedModeBanner: false,
        home: Scaffold(body: Center(child: Text('Initializing...'))),
      ),
    };
  }
}

