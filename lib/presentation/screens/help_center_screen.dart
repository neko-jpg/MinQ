import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

/// 繝倥Ν繝励そ繝ｳ繧ｿ繝ｼ逕ｻ髱｢
class HelpCenterScreen extends ConsumerWidget {
  const HelpCenterScreen({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('繝倥Ν繝励そ繝ｳ繧ｿ繝ｼ'),
      ),
      body: ListView(
        children: [
          _buildSection(
            context,
            title: '繧医￥縺ゅｋ雉ｪ蝠・,
            icon: Icons.help_outline,
            onTap: () => _navigateToFAQ(context),
          ),
          _buildSection(
            context,
            title: '繝√Η繝ｼ繝医Μ繧｢繝ｫ',
            icon: Icons.school_outlined,
            onTap: () => _navigateToTutorial(context),
          ),
          _buildSection(
            context,
            title: '縺雁撫縺・粋繧上○',
            icon: Icons.email_outlined,
            onTap: () => _navigateToContact(context),
          ),
          _buildSection(
            context,
            title: '繝舌げ蝣ｱ蜻・,
            icon: Icons.bug_report_outlined,
            onTap: () => _navigateToBugReport(context),
          ),
          const Divider(),
          _buildSection(
            context,
            title: '蛻ｩ逕ｨ隕冗ｴ・,
            icon: Icons.description_outlined,
            onTap: () => _navigateToTerms(context),
          ),
          _buildSection(
            context,
            title: '繝励Λ繧､繝舌す繝ｼ繝昴Μ繧ｷ繝ｼ',
            icon: Icons.privacy_tip_outlined,
            onTap: () => _navigateToPrivacy(context),
          ),
          _buildSection(
            context,
            title: '繝ｩ繧､繧ｻ繝ｳ繧ｹ',
            icon: Icons.info_outlined,
            onTap: () => _navigateToLicenses(context),
          ),
        ],
      ),
    );
  }

  Widget _buildSection(
    BuildContext context, {
    required String title,
    required IconData icon,
    required VoidCallback onTap,
  }) {
    return ListTile(
      leading: Icon(icon),
      title: Text(title),
      trailing: const Icon(Icons.chevron_right),
      onTap: onTap,
    );
  }

  void _navigateToFAQ(BuildContext context) {
    Navigator.push(
      context,
      MaterialPageRoute(builder: (_) => const FAQScreen()),
    );
  }

  void _navigateToTutorial(BuildContext context) {
    // TODO: 繝√Η繝ｼ繝医Μ繧｢繝ｫ逕ｻ髱｢縺ｸ驕ｷ遘ｻ
  }

  void _navigateToContact(BuildContext context) {
    Navigator.push(
      context,
      MaterialPageRoute(builder: (_) => const ContactScreen()),
    );
  }

  void _navigateToBugReport(BuildContext context) {
    Navigator.push(
      context,
      MaterialPageRoute(builder: (_) => const BugReportScreen()),
    );
  }

  void _navigateToTerms(BuildContext context) {
    Navigator.push(
      context,
      MaterialPageRoute(builder: (_) => const TermsScreen()),
    );
  }

  void _navigateToPrivacy(BuildContext context) {
    Navigator.push(
      context,
      MaterialPageRoute(builder: (_) => const PrivacyScreen()),
    );
  }

  void _navigateToLicenses(BuildContext context) {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (_) => const LicensePage(
          applicationName: 'MinQ',
          applicationVersion: '1.0.0',
          applicationLegalese: 'ﾂｩ 2025 MinQ Team',
        ),
      ),
    );
  }
}

/// FAQ逕ｻ髱｢
class FAQScreen extends StatelessWidget {
  const FAQScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('繧医￥縺ゅｋ雉ｪ蝠・),
      ),
      body: ListView(
        children: [
          _buildFAQItem(
            question: '繧ｯ繧ｨ繧ｹ繝医→縺ｯ菴輔〒縺吶°・・,
            answer: '繧ｯ繧ｨ繧ｹ繝医・縲√≠縺ｪ縺溘′邯咏ｶ壹＠縺溘＞鄙呈・縺ｮ縺薙→縺ｧ縺吶よｯ取律縺ｮ驕句虚縲∬ｪｭ譖ｸ縲∫梠諠ｳ縺ｪ縺ｩ縲√←繧薙↑鄙呈・縺ｧ繧りｨｭ螳壹〒縺阪∪縺吶・,
          ),
          _buildFAQItem(
            question: '繝壹い讖溯・縺ｯ縺ｩ縺ｮ繧医≧縺ｫ菴ｿ縺・∪縺吶°・・,
            answer: '繝壹い讖溯・繧剃ｽｿ縺・→縲∽ｻ悶・繝ｦ繝ｼ繧ｶ繝ｼ縺ｨ荳邱偵↓鄙呈・繧堤ｶ咏ｶ壹〒縺阪∪縺吶ゅ♀莠偵＞縺ｫ蜉ｱ縺ｾ縺怜粋縺・↑縺後ｉ縲√Δ繝√・繝ｼ繧ｷ繝ｧ繝ｳ繧堤ｶｭ謖√〒縺阪∪縺吶・,
          ),
          _buildFAQItem(
            question: '騾｣邯壽律謨ｰ・医せ繝医Μ繝ｼ繧ｯ・峨′騾泌・繧後※縺励∪縺・∪縺励◆',
            answer: '繧ｹ繝医Μ繝ｼ繧ｯ菫晁ｭｷ讖溯・繧剃ｽｿ縺・→縲・譌･縺縺題ｨ倬鹸繧貞ｿ倥ｌ縺ｦ繧る｣邯壽律謨ｰ繧堤ｶｭ謖√〒縺阪∪縺吶りｨｭ螳夂判髱｢縺九ｉ譛牙柑蛹悶＠縺ｦ縺上□縺輔＞縲・,
          ),
          _buildFAQItem(
            question: '騾夂衍縺悟ｱ翫″縺ｾ縺帙ｓ',
            answer: '險ｭ螳壹い繝励Μ縺ｧ騾夂衍縺瑚ｨｱ蜿ｯ縺輔ｌ縺ｦ縺・ｋ縺狗｢ｺ隱阪＠縺ｦ縺上□縺輔＞縲ゅ∪縺溘√い繝励Μ蜀・・騾夂衍險ｭ螳壹ｂ遒ｺ隱阪＠縺ｦ縺上□縺輔＞縲・,
          ),
          _buildFAQItem(
            question: '繝・・繧ｿ繧偵ヰ繝・け繧｢繝・・縺ｧ縺阪∪縺吶°・・,
            answer: '縺ｯ縺・∬ｨｭ螳夂判髱｢縺九ｉ繝・・繧ｿ繧偵お繧ｯ繧ｹ繝昴・繝医〒縺阪∪縺吶・SON縺ｾ縺溘・CSV蠖｢蠑上〒菫晏ｭ倥〒縺阪∪縺吶・,
          ),
          _buildFAQItem(
            question: '繧｢繧ｫ繧ｦ繝ｳ繝医ｒ蜑企勁縺励◆縺・,
            answer: '險ｭ螳夂判髱｢縺ｮ縲後い繧ｫ繧ｦ繝ｳ繝亥炎髯､縲阪°繧牙炎髯､縺ｧ縺阪∪縺吶ょ炎髯､縺輔ｌ縺溘ョ繝ｼ繧ｿ縺ｯ蠕ｩ蜈・〒縺阪∪縺帙ｓ縺ｮ縺ｧ縺疲ｳｨ諢上￥縺縺輔＞縲・,
          ),
          _buildFAQItem(
            question: '譛画侭繝励Λ繝ｳ縺ｯ縺ゅｊ縺ｾ縺吶°・・,
            answer: '迴ｾ蝨ｨ縲｀inQ縺ｯ螳悟・辟｡譁吶〒縺泌茜逕ｨ縺・◆縺縺代∪縺吶ょｰ・擂逧・↓繝励Ξ繝溘い繝讖溯・繧定ｿｽ蜉縺吶ｋ蜿ｯ閭ｽ諤ｧ縺後≠繧翫∪縺吶・,
          ),
          _buildFAQItem(
            question: '繧ｪ繝輔Λ繧､繝ｳ縺ｧ繧ゆｽｿ縺医∪縺吶°・・,
            answer: '縺ｯ縺・√が繝輔Λ繧､繝ｳ縺ｧ繧りｨ倬鹸縺ｧ縺阪∪縺吶ゅう繝ｳ繧ｿ繝ｼ繝阪ャ繝医↓謗･邯壹☆繧九→閾ｪ蜍慕噪縺ｫ蜷梧悄縺輔ｌ縺ｾ縺吶・,
          ),
        ],
      ),
    );
  }

  Widget _buildFAQItem({
    required String question,
    required String answer,
  }) {
    return ExpansionTile(
      title: Text(
        question,
        style: const TextStyle(fontWeight: FontWeight.bold),
      ),
      children: [
        Padding(
          padding: const EdgeInsets.all(16.0),
          child: Text(answer),
        ),
      ],
    );
  }
}

/// 縺雁撫縺・粋繧上○逕ｻ髱｢
class ContactScreen extends StatefulWidget {
  const ContactScreen({super.key});

  @override
  State<ContactScreen> createState() => _ContactScreenState();
}

class _ContactScreenState extends State<ContactScreen> {
  final _formKey = GlobalKey<FormState>();
  final _nameController = TextEditingController();
  final _emailController = TextEditingController();
  final _messageController = TextEditingController();

  @override
  void dispose() {
    _nameController.dispose();
    _emailController.dispose();
    _messageController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('縺雁撫縺・粋繧上○'),
      ),
      body: Form(
        key: _formKey,
        child: ListView(
          padding: const EdgeInsets.all(16.0),
          children: [
            TextFormField(
              controller: _nameController,
              decoration: const InputDecoration(
                labelText: '縺雁錐蜑・,
                border: OutlineInputBorder(),
              ),
              validator: (value) {
                if (value == null || value.isEmpty) {
                  return '縺雁錐蜑阪ｒ蜈･蜉帙＠縺ｦ縺上□縺輔＞';
                }
                return null;
              },
            ),
            const SizedBox(height: 16),
            TextFormField(
              controller: _emailController,
              decoration: const InputDecoration(
                labelText: '繝｡繝ｼ繝ｫ繧｢繝峨Ξ繧ｹ',
                border: OutlineInputBorder(),
              ),
              keyboardType: TextInputType.emailAddress,
              validator: (value) {
                if (value == null || value.isEmpty) {
                  return '繝｡繝ｼ繝ｫ繧｢繝峨Ξ繧ｹ繧貞・蜉帙＠縺ｦ縺上□縺輔＞';
                }
                if (!value.contains('@')) {
                  return '譛牙柑縺ｪ繝｡繝ｼ繝ｫ繧｢繝峨Ξ繧ｹ繧貞・蜉帙＠縺ｦ縺上□縺輔＞';
                }
                return null;
              },
            ),
            const SizedBox(height: 16),
            TextFormField(
              controller: _messageController,
              decoration: const InputDecoration(
                labelText: '縺雁撫縺・粋繧上○蜀・ｮｹ',
                border: OutlineInputBorder(),
              ),
              maxLines: 5,
              validator: (value) {
                if (value == null || value.isEmpty) {
                  return '縺雁撫縺・粋繧上○蜀・ｮｹ繧貞・蜉帙＠縺ｦ縺上□縺輔＞';
                }
                return null;
              },
            ),
            const SizedBox(height: 24),
            ElevatedButton(
              onPressed: _submitContact,
              child: const Text('騾∽ｿ｡'),
            ),
          ],
        ),
      ),
    );
  }

  Future<void> _submitContact() async {
    if (_formKey.currentState!.validate()) {
      // TODO: 縺雁撫縺・粋繧上○繧帝∽ｿ｡
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('縺雁撫縺・粋繧上○繧帝∽ｿ｡縺励∪縺励◆')),
      );
      Navigator.pop(context);
    }
  }
}

/// 繝舌げ蝣ｱ蜻顔判髱｢
class BugReportScreen extends StatefulWidget {
  const BugReportScreen({super.key});

  @override
  State<BugReportScreen> createState() => _BugReportScreenState();
}

class _BugReportScreenState extends State<BugReportScreen> {
  final _formKey = GlobalKey<FormState>();
  final _titleController = TextEditingController();
  final _descriptionController = TextEditingController();

  @override
  void dispose() {
    _titleController.dispose();
    _descriptionController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('繝舌げ蝣ｱ蜻・),
      ),
      body: Form(
        key: _formKey,
        child: ListView(
          padding: const EdgeInsets.all(16.0),
          children: [
            const Text(
              '繝舌げ繧堤匱隕九＆繧後◆蝣ｴ蜷医・縲∽ｻ･荳九・繝輔か繝ｼ繝縺九ｉ縺泌ｱ蜻翫￥縺縺輔＞縲・,
              style: TextStyle(fontSize: 14),
            ),
            const SizedBox(height: 16),
            TextFormField(
              controller: _titleController,
              decoration: const InputDecoration(
                labelText: '繧ｿ繧､繝医Ν',
                border: OutlineInputBorder(),
              ),
              validator: (value) {
                if (value == null || value.isEmpty) {
                  return '繧ｿ繧､繝医Ν繧貞・蜉帙＠縺ｦ縺上□縺輔＞';
                }
                return null;
              },
            ),
            const SizedBox(height: 16),
            TextFormField(
              controller: _descriptionController,
              decoration: const InputDecoration(
                labelText: '隧ｳ邏ｰ',
                hintText: '逋ｺ逕溘＠縺溽憾豕√∝・迴ｾ謇矩・↑縺ｩ繧定ｩｳ縺励￥險倩ｼ峨＠縺ｦ縺上□縺輔＞',
                border: OutlineInputBorder(),
              ),
              maxLines: 5,
              validator: (value) {
                if (value == null || value.isEmpty) {
                  return '隧ｳ邏ｰ繧貞・蜉帙＠縺ｦ縺上□縺輔＞';
                }
                return null;
              },
            ),
            const SizedBox(height: 16),
            OutlinedButton.icon(
              onPressed: _attachScreenshot,
              icon: const Icon(Icons.image),
              label: const Text('繧ｹ繧ｯ繝ｪ繝ｼ繝ｳ繧ｷ繝ｧ繝・ヨ繧呈ｷｻ莉・),
            ),
            const SizedBox(height: 24),
            ElevatedButton(
              onPressed: _submitBugReport,
              child: const Text('騾∽ｿ｡'),
            ),
          ],
        ),
      ),
    );
  }

  Future<void> _attachScreenshot() async {
    // TODO: 繧ｹ繧ｯ繝ｪ繝ｼ繝ｳ繧ｷ繝ｧ繝・ヨ繧呈ｷｻ莉・
  }

  Future<void> _submitBugReport() async {
    if (_formKey.currentState!.validate()) {
      // TODO: 繝舌げ蝣ｱ蜻翫ｒ騾∽ｿ｡
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('繝舌げ蝣ｱ蜻翫ｒ騾∽ｿ｡縺励∪縺励◆')),
      );
      Navigator.pop(context);
    }
  }
}

/// 蛻ｩ逕ｨ隕冗ｴ・判髱｢
class TermsScreen extends StatelessWidget {
  const TermsScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('蛻ｩ逕ｨ隕冗ｴ・),
      ),
      body: const SingleChildScrollView(
        padding: EdgeInsets.all(16.0),
        child: Text(
          // TODO: assets/legal/terms_of_service_ja.md 縺九ｉ隱ｭ縺ｿ霎ｼ繧
          '蛻ｩ逕ｨ隕冗ｴ・・蜀・ｮｹ縺後％縺薙↓陦ｨ遉ｺ縺輔ｌ縺ｾ縺・,
        ),
      ),
    );
  }
}

/// 繝励Λ繧､繝舌す繝ｼ繝昴Μ繧ｷ繝ｼ逕ｻ髱｢
class PrivacyScreen extends StatelessWidget {
  const PrivacyScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('繝励Λ繧､繝舌す繝ｼ繝昴Μ繧ｷ繝ｼ'),
      ),
      body: const SingleChildScrollView(
        padding: EdgeInsets.all(16.0),
        child: Text(
          // TODO: assets/legal/privacy_policy_ja.md 縺九ｉ隱ｭ縺ｿ霎ｼ繧
          '繝励Λ繧､繝舌す繝ｼ繝昴Μ繧ｷ繝ｼ縺ｮ蜀・ｮｹ縺後％縺薙↓陦ｨ遉ｺ縺輔ｌ縺ｾ縺・,
        ),
      ),
    );
  }
}
