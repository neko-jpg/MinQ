import 'package:flutter/material.dart';
import 'package:minq/presentation/common/onboarding/onboarding_engine.dart';

/// „Ç§„É≥„Çø„É©„ÇØ„ÉÅEÇ£„Éñ„ÉÑ„Ç¢„Éº„ÇíË°®Á§∫„Åô„Çã„Çπ„ÇØ„É™„Éº„É≥
class InteractiveTourScreen extends StatefulWidget {
  final List<TourStep> steps;
  final VoidCallback? onComplete;

  const InteractiveTourScreen({
    super.key,
    required this.steps,
    this.onComplete,
  });

  @override
  State<InteractiveTourScreen> createState() => _InteractiveTourScreenState();
}

class _InteractiveTourScreenState extends State<InteractiveTourScreen>
    with TickerProviderStateMixin {
  int _currentStepIndex = 0;
  late AnimationController _slideController;
  late AnimationController _fadeController;
  late Animation<Offset> _slideAnimation;
  late Animation<double> _fadeAnimation;

  @override
  void initState() {
    super.initState();
    _initializeAnimations();
    _fadeController.forward();
  }

  void _initializeAnimations() {
    _slideController = AnimationController(
      duration: const Duration(milliseconds: 300),
      vsync: this,
    );

    _fadeController = AnimationController(
      duration: const Duration(milliseconds: 400),
      vsync: this,
    );

    _slideAnimation = Tween<Offset>(
      begin: const Offset(1.0, 0.0),
      end: Offset.zero,
    ).animate(CurvedAnimation(
      parent: _slideController,
      curve: Curves.easeInOut,
    ),);

    _fadeAnimation = Tween<double>(
      begin: 0.0,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: _fadeController,
      curve: Curves.easeInOut,
    ),);
  }

  void _nextStep() {
    if (_currentStepIndex < widget.steps.length - 1) {
      _slideController.forward().then((_) {
        setState(() {
          _currentStepIndex++;
        });
        _slideController.reset();
      });
      
      // „Ç´„Çπ„Çø„É†„Ç¢„ÇØ„Ç∑„Éß„É≥„ÇíÂÆüË°ÅE
      widget.steps[_currentStepIndex].onNext?.call();
    } else {
      _completeTour();
    }
  }

  void _previousStep() {
    if (_currentStepIndex > 0) {
      _slideController.forward().then((_) {
        setState(() {
          _currentStepIndex--;
        });
        _slideController.reset();
      });
    }
  }

  void _completeTour() async {
    await OnboardingEngine.markOnboardingCompleted();
    widget.onComplete?.call();
    if (mounted) {
      Navigator.of(context).pop();
    }
  }

  void _skipTour() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('„ÉÅEÇ¢„Éº„Çí„Çπ„Ç≠„ÉÅEÅE„Åó„Åæ„Åô„ÅãÅEÅE),
        content: const Text('Âæå„ÅßË®≠ÂÆöÁîªÈù¢„Åã„Çâ„ÉÅEÇ¢„Éº„ÇíÂÅEÈñã„Åß„Åç„Åæ„Åô„ÄÅE),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('„Ç≠„É£„É≥„Çª„É´'),
          ),
          TextButton(
            onPressed: () {
              Navigator.of(context).pop();
              _completeTour();
            },
            child: const Text('„Çπ„Ç≠„ÉÅEÅE'),
          ),
        ],
      ),
    );
  }

  @override
  void dispose() {
    _slideController.dispose();
    _fadeController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final currentStep = widget.steps[_currentStepIndex];
    final theme = Theme.of(context);

    return Scaffold(
      backgroundColor: Colors.black.withValues(alpha: 0.8),
      body: FadeTransition(
        opacity: _fadeAnimation,
        child: SafeArea(
          child: Column(
            children: [
              // „Éò„ÉÉ„ÉÄ„Éº
              _buildHeader(theme),
              
              // „É°„Ç§„É≥„Ç≥„É≥„ÉÅEÉ≥„ÉÅE
              Expanded(
                child: SlideTransition(
                  position: _slideAnimation,
                  child: _buildStepContent(currentStep, theme),
                ),
              ),
              
              // „Éï„ÉÉ„Çø„Éº
              _buildFooter(theme),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildHeader(ThemeData theme) {
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Text(
            'MinQ „ÉÅEÇ¢„Éº',
            style: theme.textTheme.headlineSmall?.copyWith(
              color: Colors.white,
              fontWeight: FontWeight.bold,
            ),
          ),
          TextButton(
            onPressed: _skipTour,
            child: Text(
              '„Çπ„Ç≠„ÉÅEÅE',
              style: TextStyle(
                color: Colors.white.withValues(alpha: 0.8),
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildStepContent(TourStep step, ThemeData theme) {
    return Container(
      margin: const EdgeInsets.all(24.0),
      padding: const EdgeInsets.all(24.0),
      decoration: BoxDecoration(
        color: theme.colorScheme.surface,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withValues(alpha: 0.2),
            blurRadius: 20,
            offset: const Offset(0, 10),
          ),
        ],
      ),
      child: Column(
        mainAxisSize: MainAxisSize.min,
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // „Çπ„ÉÅEÉÉ„Éó„Ç§„É≥„Ç∏„Ç±„Éº„Çø„Éº
          _buildStepIndicator(theme),
          
          const SizedBox(height: 24),
          
          // „Çø„Ç§„Éà„É´
          Text(
            step.title,
            style: theme.textTheme.headlineSmall?.copyWith(
              fontWeight: FontWeight.bold,
              color: theme.colorScheme.onSurface,
            ),
          ),
          
          const SizedBox(height: 16),
          
          // Ë™¨ÊòÅE
          Text(
            step.description,
            style: theme.textTheme.bodyLarge?.copyWith(
              color: theme.colorScheme.onSurface.withValues(alpha: 0.8),
              height: 1.5,
            ),
          ),
          
          const SizedBox(height: 24),
          
          // „Ç´„Çπ„Çø„É†„Ç¶„Ç£„Ç∏„Çß„ÉÅEÉà
          if (step.customWidget != null) ...[
            step.customWidget!,
            const SizedBox(height: 24),
          ],
          
          // „Ç§„É≥„Çø„É©„ÇØ„ÉÅEÇ£„ÉñË¶ÅÁ¥†
          _buildInteractiveElement(step, theme),
        ],
      ),
    );
  }

  Widget _buildStepIndicator(ThemeData theme) {
    return Row(
      children: List.generate(
        widget.steps.length,
        (index) => Container(
          width: 8,
          height: 8,
          margin: const EdgeInsets.only(right: 8),
          decoration: BoxDecoration(
            shape: BoxShape.circle,
            color: index <= _currentStepIndex
                ? theme.colorScheme.primary
                : theme.colorScheme.outline.withValues(alpha: 0.3),
          ),
        ),
      ),
    );
  }

  Widget _buildInteractiveElement(TourStep step, ThemeData theme) {
    // „Çπ„ÉÅEÉÉ„Éó„Å´Âøú„Åò„Åü„Ç§„É≥„Çø„É©„ÇØ„ÉÅEÇ£„ÉñË¶ÅÁ¥†„ÇíË°®Á§∫
    switch (_currentStepIndex) {
      case 0:
        return _buildWelcomeInteraction(theme);
      case 1:
        return _buildQuestCreationDemo(theme);
      case 2:
        return _buildCompletionDemo(theme);
      default:
        return const SizedBox.shrink();
    }
  }

  Widget _buildWelcomeInteraction(ThemeData theme) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: theme.colorScheme.primaryContainer.withValues(alpha: 0.3),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(
          color: theme.colorScheme.primary.withValues(alpha: 0.3),
        ),
      ),
      child: Row(
        children: [
          Icon(
            Icons.waving_hand,
            color: theme.colorScheme.primary,
            size: 32,
          ),
          const SizedBox(width: 16),
          Expanded(
            child: Text(
              'MinQ„Å∏„Çà„ÅÜ„Åì„ÅùÅEÅ\nÁøíÊÅEÂåñ„ÅEÊóÅEÇíÂßã„ÇÅ„Åæ„Åó„Çá„ÅÅE,
              style: theme.textTheme.bodyMedium?.copyWith(
                color: theme.colorScheme.onSurface,
                fontWeight: FontWeight.w500,
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildQuestCreationDemo(ThemeData theme) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: theme.colorScheme.secondaryContainer.withValues(alpha: 0.3),
        borderRadius: BorderRadius.circular(12),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            '„ÇØ„Ç®„Çπ„Éà‰æãÔºÅE,
            style: theme.textTheme.labelLarge?.copyWith(
              color: theme.colorScheme.onSurface,
              fontWeight: FontWeight.bold,
            ),
          ),
          const SizedBox(height: 8),
          _buildQuestExample('ÊØéÊúù„Ç∏„Éß„ÇÆ„É≥„Ç∞', Icons.directions_run, theme),
          _buildQuestExample('Ë™≠Êõ∏30ÂàÅE, Icons.book, theme),
          _buildQuestExample('Ê∞¥„ÇÅELÈ£≤„ÇÄ', Icons.local_drink, theme),
        ],
      ),
    );
  }

  Widget _buildQuestExample(String title, IconData icon, ThemeData theme) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4),
      child: Row(
        children: [
          Icon(
            icon,
            size: 20,
            color: theme.colorScheme.primary,
          ),
          const SizedBox(width: 12),
          Text(
            title,
            style: theme.textTheme.bodyMedium?.copyWith(
              color: theme.colorScheme.onSurface,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildCompletionDemo(ThemeData theme) {
    return GestureDetector(
      onTap: () {
        // „ÉÅEÉ¢Áî®„ÅÆ„ÉÅ„Çß„ÉÅEÇØ„Éú„ÉÉ„ÇØ„Çπ„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: const Text('Á¥†Êô¥„Çâ„Åó„ÅÅEºÅ„ÇØ„Ç®„Çπ„ÉàÂÆå‰∫ÅEÅß„ÅÅEüéâ'),
            backgroundColor: theme.colorScheme.primary,
            duration: const Duration(seconds: 2),
          ),
        );
      },
      child: Container(
        padding: const EdgeInsets.all(16),
        decoration: BoxDecoration(
          color: theme.colorScheme.primaryContainer.withValues(alpha: 0.3),
          borderRadius: BorderRadius.circular(12),
          border: Border.all(
            color: theme.colorScheme.primary.withValues(alpha: 0.3),
          ),
        ),
        child: Row(
          children: [
            Container(
              width: 24,
              height: 24,
              decoration: BoxDecoration(
                shape: BoxShape.circle,
                border: Border.all(
                  color: theme.colorScheme.primary,
                  width: 2,
                ),
              ),
              child: const Icon(
                Icons.check,
                size: 16,
                color: Colors.transparent,
              ),
            ),
            const SizedBox(width: 16),
            Expanded(
              child: Text(
                '„Çø„ÉÅEÅE„Åó„Å¶„ÇØ„Ç®„Çπ„ÉàÂÆå‰∫ÅEÇí‰ΩìÈ®ÅE,
                style: theme.textTheme.bodyMedium?.copyWith(
                  color: theme.colorScheme.onSurface,
                ),
              ),
            ),
            Icon(
              Icons.touch_app,
              color: theme.colorScheme.primary.withValues(alpha: 0.7),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildFooter(ThemeData theme) {
    return Padding(
      padding: const EdgeInsets.all(24.0),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          // Êàª„Çã„ÅE„Çø„É≥
          if (_currentStepIndex > 0)
            TextButton.icon(
              onPressed: _previousStep,
              icon: const Icon(Icons.arrow_back),
              label: const Text('Êàª„ÇÅE),
              style: TextButton.styleFrom(
                foregroundColor: Colors.white.withValues(alpha: 0.8),
              ),
            )
          else
            const SizedBox.shrink(),
          
          // ÈÄ≤ÊçóË°®Á§∫
          Text(
            '${_currentStepIndex + 1} / ${widget.steps.length}',
            style: TextStyle(
              color: Colors.white.withValues(alpha: 0.8),
              fontSize: 16,
            ),
          ),
          
          // Ê¨°„Å∏„Éú„Çø„É≥
          ElevatedButton.icon(
            onPressed: _nextStep,
            icon: Icon(
              _currentStepIndex == widget.steps.length - 1
                  ? Icons.check
                  : Icons.arrow_forward,
            ),
            label: Text(
              _currentStepIndex == widget.steps.length - 1
                  ? 'ÂÆå‰∫ÅE
                  : 'Ê¨°„Å∏',
            ),
            style: ElevatedButton.styleFrom(
              backgroundColor: theme.colorScheme.primary,
              foregroundColor: theme.colorScheme.onPrimary,
              padding: const EdgeInsets.symmetric(
                horizontal: 24,
                vertical: 12,
              ),
            ),
          ),
        ],
      ),
    );
  }
}

/// „ÉÅEÇ¢„Éº„Çπ„ÉÅEÉÉ„Éó„ÅE„Éì„É´„ÉÄ„Éº
class TourStepBuilder {
  static List<TourStep> buildDefaultTour() {
    return [
      const TourStep(
        title: 'MinQ„Å∏„Çà„ÅÜ„Åì„ÅùÅEÅE,
        description: 'MinQ„ÅØÁøíÊÅEÂåñ„ÇíÊ•Ω„Åó„ÅèÁ∂ö„Åë„Çã„Åü„ÇÅ„ÅE„Ç¢„Éó„É™„Åß„Åô„ÄÅE
            '„ÅÇ„Å™„Åü„ÅEÁõÆÊ®ôÈÅîÊàê„Çí„Çµ„Éù„ÅE„Éà„Åó„ÄÅÁ∂ôÁ∂ö„Åô„ÇãÂñú„Å≥„ÇíÊÑü„Åò„Çâ„Çå„Çã„Çà„ÅÜ„Å´Ë®≠Ë®à„Åï„Çå„Å¶„ÅÅEÅæ„Åô„ÄÅE,
      ),
      const TourStep(
        title: '„ÇØ„Ç®„Çπ„Éà„Çí‰ΩúÊÅE„Åó„Åæ„Åó„Çá„ÅÅE,
        description: 'ÁøíÊÅEÂåñ„Åó„Åü„ÅÑ„Åì„Å®„Çí„Äå„ÇØ„Ç®„Çπ„Éà„Äç„Å®„Åó„Å¶ÁôªÈå≤„Åó„Åæ„Åô„ÄÅE
            '„ÄåÊØéÊúù„Ç∏„Éß„ÇÆ„É≥„Ç∞„Äç„ÄåË™≠Êõ∏30ÂàÅEÄç„Å™„Å©„ÄÅÂÅE‰ΩìÁöÑ„ÅßÂÆüË°å„Åó„ÇÅEÅô„ÅÅEÅEÂÆπ„Å´„Åó„Åæ„Åó„Çá„ÅÅEÄÅE,
      ),
      const TourStep(
        title: '„ÇØ„Ç®„Çπ„Éà„ÇíÂÆå‰∫ÅEÅó„Åæ„Åó„Çá„ÅÅE,
        description: '„ÇØ„Ç®„Çπ„Éà„ÇíÂÆüË°å„Åó„Åü„Çâ„ÄÅ„ÉÅ„Çß„ÉÅEÇØ„Éû„ÅE„ÇØ„Çí„Çø„ÉÅEÅE„Åó„Å¶ÂÆå‰∫ÅEÅ´„Åó„Åæ„Åô„ÄÅE
            'ÂÆå‰∫ÅEôÇ„Å´„ÅØÊ∞óÊåÅ„Å°„ÅÆËâØ„ÅÅEÇ¢„Éã„É°„Éº„Ç∑„Éß„É≥„Å®ÂäπÊûúÈü≥„Åß„ÅäÁ•ù„ÅÑ„Åó„Åæ„ÅôÔºÅE,
      ),
      const TourStep(
        title: 'ÈÄ≤Êçó„ÇíÁ¢∫Ë™ç„Åó„Åæ„Åó„Çá„ÅÅE,
        description: 'Á∂ôÁ∂öË®òÈå≤„ÇÅEÅîÊàêÁä∂Ê≥Å„Çí„Ç∞„É©„Éï„ÅßÁ¢∫Ë™ç„Åß„Åç„Åæ„Åô„ÄÅE
            'ÈÄ£Á∂öË®òÈå≤„Åå‰º∏„Å≥„Å¶„ÅÅEÅèÊßòÂ≠ê„ÇíË¶ã„Çã„Åì„Å®„Åß„ÄÅ„É¢„ÉÅ„ÅE„Éº„Ç∑„Éß„É≥„ÇíÁ∂≠ÊåÅ„Åß„Åç„Åæ„Åô„ÄÅE,
      ),
      const TourStep(
        title: '„Éö„Ç¢„Å®‰∏ÄÁ∑í„Å´È†ëÂºµ„Çä„Åæ„Åó„Çá„ÅÅE,
        description: 'ÂåøÂêç„ÅE„Éö„Ç¢„Å®Âä±„Åæ„ÅóÂêà„ÅÅEÅ™„Åå„ÇâÁøíÊÅEÂåñ„Å´Âèñ„ÇäÁµÅEÇÅ„Åæ„Åô„ÄÅE
            '„Å≤„Å®„Çä„Åò„ÇÅEÅ™„ÅÅEÆâÂøÅEÑü„Åß„ÄÅ‰∏âÊó•Âùä‰∏ª„ÇíÈò≤„Åí„Åæ„Åô„ÄÅE,
      ),
      const TourStep(
        title: 'Ê∫ñÂÇôÂÆå‰∫ÅEÅß„ÅôÔºÅE,
        description: '„Åì„Çå„ÅßMinQ„ÅÆÂü∫Êú¨ÁöÅEÅ™‰Ωø„ÅÅEñπ„Åå„Çè„Åã„Çä„Åæ„Åó„Åü„ÄÅE
            '„Åï„Å£„Åù„ÅèÊúÄÂàù„ÅE„ÇØ„Ç®„Çπ„Éà„Çí‰ΩúÊÅE„Åó„Å¶„ÄÅÁøíÊÅEÂåñ„ÅEÊóÅEÇíÂßã„ÇÅ„Åæ„Åó„Çá„ÅÅEºÅE,
      ),
    ];
  }
}